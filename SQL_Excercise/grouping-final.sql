-- Slide #1

-- 1. How many countries does each salesperson operate in?
SELECT salesperson, -- unaggregated column (goes in your GROUP BY clause)
	COUNT(DISTINCT country) AS number_of_countries -- aggregated column
FROM regions
GROUP BY salesperson  -- unaggregated column or columns in the SELECT clause go in the GROUP BY
ORDER BY 2 DESC; -- Can order output as one sees fit


-- 2. How many items were returned for each return reason.
-- Tip: Remember that each return might include multiple items (quantity)
SELECT reason_returned,  -- unaggregated column (goes in your GROUP BY clause)
	SUM(return_quantity) AS number_of_returned_items  -- aggregated column
FROM returns
GROUP BY reason_returned -- unaggregated column or columns in the SELECT clause go in the GROUP BY
ORDER BY 2 DESC;


SELECT reason_returned,  -- unaggregated column (goes in your GROUP BY clause)
	COUNT(return_quantity), SUM(return_quantity) AS number_of_returned_items  -- aggregated column
FROM returns
GROUP BY reason_returned -- unaggregated column or columns in the SELECT clause go in the GROUP BY
ORDER BY 2 DESC;

SELECT DISTINCT return_quantity
FROM returns;


-- 3. What is the average cost of products in each sub category,
-- excluding items in the furniture category?
SELECT sub_category, ROUND(AVG(product_cost_to_consumer),2)::MONEY AS average_cost
FROM products
WHERE category <>'Furniture' -- Could also do != 'Furniture' or NOT IN('Furniture')
GROUP BY sub_category
ORDER BY 2 DESC;

SELECT DISTINCT category, sub_category
FROM products

-- SELECT category, sub_category, ROUND(AVG(product_cost_to_consumer),2)::MONEY AS average_cost
-- FROM products
-- WHERE category <>'Furniture' -- Could also do != 'Furniture' or NOT IN('Furniture')
-- GROUP BY category, sub_category
-- ORDER BY 2 DESC;

--------------------------------------------------------------------------------------------

-- Slide #2
-- 1. What is the average cost of products by sub-category, rounded to two decimal places?
SELECT sub_category, ROUND(AVG(product_cost_to_consumer),2) AS average_cost
FROM products
GROUP BY sub_category
ORDER BY 2 DESC;


-- 2. Exclude any sub-categories from the list where the average price is $100 or more
SELECT sub_category, ROUND(AVG(product_cost_to_consumer),2) AS average_cost
FROM products
GROUP BY sub_category
HAVING AVG(product_cost_to_consumer) < 100
ORDER BY 2 DESC;

-------------------------------------------------------------------------------------------
-- Slide #3

/* Revenue is the total amount of income generated by the sale of goods or services
related to the company's primary operations.

Profit is the amount of income that remains after
accounting for all expenses, debts, additional income streams, and operating costs.*/

-- Produce a table of data that shows total revenue per individual product (use product id),
-- showing only those products that meet a minimum threshold of $10,000 in sales.
-- Order the list high to low
SELECT product_id, SUM(sales) AS revenue
FROM orders
GROUP BY product_id
-- HAVING SUM(sales) >= 10000
ORDER BY revenue DESC;


SELECT COUNT(*)
FROM
(SELECT product_id, SUM(sales)::MONEY AS revenue
 FROM orders
 GROUP BY product_id
 HAVING SUM(sales)>=10000
 ORDER BY 2 DESC) AS temp_table;
-- 4713 rows

SELECT COUNT(*)
FROM
(SELECT product_id, SUM(sales)::MONEY AS revenue
 FROM orders
 GROUP BY product_id
 ORDER BY 2 DESC) AS temp_table;
-- 10292 rows

-- How many product ids met this minimum threshold of sales?
-- 4713 rows meeting the threshold

-- How many product ids were sold in total (irrespective of threshold)?
-- 10292 product ids in total

SELECT COUNT (DISTINCT product_id)
FROM orders;
--WHERE order_id IS NOT NULL OR order_id <> '';



-- What share (percentage) of products meet the minimum threshold of $10,000?
SELECT TO_CHAR(ROUND((4713::NUMERIC/10292::NUMERIC)*100, 2), '99D99%');
-- 45.79%

SELECT DIV(4713.0,10292.0);

SELECT ROUND(4713*100::decimal/10292,2)||'%' AS products_with_min_10k;
-- decimal, numeric, float

--||'%' <--- concates a percentage sign
-- || <-- concatentation symbol

SELECT ROUND(4713*100.0/10292,2)||'%' AS products_with_min_10k;
--SELECT ROUND(4713 * 100.0 / 10292, 2)||'%' AS percentage_met_threshold;

-- integer division in postgresql is floor division (truncates the decimal)
SELECT 12/24
SELECT 23/4


-- Tip: Case to numeric or decimal and avoid float in many situations.

select sub_category, cast (avg (product_cost_to_consumer) as decimal(10,2))
from products
group by sub_category;


SELECT COUNT(product_id) AS number_met_threshold
FROM
  (SELECT product_ID,  SUM(sales)
   FROM orders
   GROUP BY product_ID
   HAVING SUM(sales) >= 10000
  ) AS t;
-- 4713 rows

SELECT COUNT(DISTINCT product_id)
FROM products;
-- 10292 rows

SELECT COUNT(product_id) AS products_with_sales
FROM
  (SELECT product_id,  SUM(sales)
   FROM orders
   GROUP BY product_id
  ) AS s;
-- 10292 rows



SELECT
ROUND((SELECT COUNT(product_id)::NUMERIC AS number_met_threshold
FROM
  (SELECT product_ID,  SUM(sales)
   FROM orders
   GROUP BY product_ID
   HAVING SUM(sales) >= 10000
  ) AS t) /
(SELECT COUNT(product_id)::NUMERIC AS total
FROM
  (SELECT product_ID,  SUM(sales)
   FROM orders
   GROUP BY product_ID
  ) AS s)*100, 2) AS percentage_met_threshold;



SELECT DISTINCT COUNT(product_id)
FROM products;

SELECT COUNT(DISTINCT product_id)
FROM products;

SELECT DISTINCT COUNT(order_id)
FROM orders;

SELECT COUNT(DISTINCT order_id)
FROM orders;

SELECT order_id, COUNT(order_id)
FROM orders
GROUP BY order_id
HAVING COUNT(order_id) > 1
ORDER BY count(order_id) DESC;




SELECT ROUND((100 * (COUNT(*)::NUMERIC)/(SELECT COUNT(DISTINCT product_id)
	FROM orders)::NUMERIC), 2)||'%' AS percentage_met_threshold
FROM (SELECT COUNT(DISTINCT product_id)
	FROM orders
	GROUP BY product_id
	HAVING SUM(sales) > 10000) AS temp;


SELECT COUNT(CASE WHEN Revenue>=10000 THEN product_id END) AS total_product_Revenue_gt_10000,
	count(product_id) AS total_product_count,
	ROUND(COUNT (CASE WHEN Revenue>=10000 THEN product_id END)*100.00/count(product_id), 2)||'%'
	AS share_total_product_Revenue_gt_10000
FROM
	(SELECT product_id, SUM(sales) AS Revenue
	 FROM orders
	 GROUP BY product_id) Revenue_table;



SELECT
	SUM(CASE WHEN sales >=10000 THEN 1 ELSE 0 END) AS sales_10k_plus,
	COUNT(DISTINCT product_id) AS sales_total,
	ROUND(((SUM(CASE
			WHEN sales >= 10000 THEN 1 ELSE 0
			END)::DECIMAL / COUNT(DISTINCT product_id)::DECIMAL)*100), 2)
			AS percentage_above_10k
FROM orders;
-- GROUP BY product_id;

SELECT ship_mode, CAST(ROUND(AVG(sales), 2) AS MONEY) AS average_sales
-- ROUND(AVG(sales), 2)::MONEY
FROM orders
WHERE profit > 0.4
-- unaggregated columns or columns
GROUP BY ship_mode

-- ORDER OF CONSTRUCTION or LEXICAL
SELECT COALESCE(ship_mode, 'Average of All'), CAST(ROUND(AVG(sales), 2) AS MONEY) AS average_sales
-- ROUND(AVG(sales), 2)::MONEY
FROM orders 
WHERE profit > 0.4 -- row by row filtering
-- unaggregated columns or columns
-- GROUP BY (ship_mode) -- runs third
GROUP BY CUBE (ship_mode) -- runs third
--HAVING ROUND(AVG(sales), 2) > 300
-- HAVING ROUND(AVG(sales), 2) > 300
ORDER BY average_sales DESC
-- ORDER BY 2 ASC



-- ORDER OF CONSTRUCTION or LEXICAL
SELECT ship_mode, CAST(ROUND(AVG(sales), 2) AS MONEY) AS average_sales
-- ROUND(AVG(sales), 2)::MONEY
FROM orders 
WHERE profit > 0.4 -- row by row filtering
-- unaggregated columns or columns
GROUP BY ship_mode -- runs third
HAVING ROUND(AVG(sales), 2) > 300
-- HAVING ROUND(AVG(sales), 2) > 300
ORDER BY average_sales DESC
-- ORDER BY 2 ASC






